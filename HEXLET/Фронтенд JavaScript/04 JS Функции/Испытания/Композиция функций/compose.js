/*
Реализуйте и экспортируйте по умолчанию функцию compose, которая принимает на вход две других 
одноаргументных функции и возвращает новую функцию. Эта новая функция также принимает на вход 
один параметр и при вызове применяет его последовательно к переданным функциям в обратном порядке.

Примеры ниже помогут понять, как должна работать функция:

const f = compose(Math.sqrt, Math.abs);
f(-4); // => 2

compose(v => v, v => v)(10); // => 10
compose(v => v + 2, v => v)(10); // => 12
compose(v => v, v => v - 2)(10); // => 8
compose(v => v ** 2, v => v - 2)(2); // => 0
compose(v => v - 2, v => v ** 2)(2); // => 2
*/

// тут есть тонкость, во входных параметрах сначала f1, затем f2
// на выходе сначала f2. затем f1 => f1(f2(arg))
const compose = (f1, f2) => arg => f1(f2(arg));

console.log(compose(v => v, v => v)(10)); // => 10
console.log(compose(v => v + 2, v => v)(10)); // => 12
console.log(compose(v => v, v => v - 2)(10)); // => 8
console.log(compose(v => v ** 2, v => v - 2)(2)); // => 0
console.log(compose(v => v - 2, v => v ** 2)(2)); // => 2
